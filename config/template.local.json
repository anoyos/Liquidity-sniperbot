{
  "chain": {
    "nodes": {
      "stream": "rpc to stream new pending txs from the mempool, should be an ipc or wss node. MUST HAVE SAME CHAIN ID AS OTHERS!!",
      "snipe": "rpc to write/push/broadcast our txs and query them with any info we may need, can be ipc/wss or json-rpc. Ideally ipc/wss for lower latency. MUST HAVE SAME CHAIN ID AS OTHERS!!",
      "configure": "rpc to configure the sniper. MUST BE JSON-RPC. MUST HAVE SAME CHAIN ID AS OTHERS!!",
      "dummy (you can delete this line)": "in pending_txs mode, 'snipe' and 'stream' nodes SHOULD BE THE SAME. Else you may have race conditions between gossiping nodes",
      "dummy (you can delete this line)2": "in block mode, 'snipe' node can be whatever you like. It's still HIGHLY RECOMMENDED to use the same node as 'stream'"
    },
    "id": 56,
    "name": "bsc-mainnet -> name of the chain. id is the chain id, eg 56 for binance mainnet"
  },
  "order": {
    "dummy (you can delete this line)": "stuff in here is used when configuring the trigger and when sniping (eg. how much are we spending, how much are we buying, etc)",
    "size": 2,
    "expected_tokens": 15000,
    "dummy (you can delete this line)2": "you will be buying with order size (in BNB) at least the expected_amount of X tokens. eg. size=1.5 / expected_amount=8000 -> you will spend 1.5BNB to buy AT LEAST 8000 tokens.",
    "dummy (you can delete this line)3": "size and expected_tokens can be floating point UP TO 3 DECIMAL PLACES. eg: 10.123 OK / 10.1234 ERROR."
  },
  "contract": {
    "trigger": "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82 -> your deployed trigger address",
    "factory": "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73 -> AMM factory address in the provided chain",
    "router": "0x10ED43C718714eb63d5aA57B78B54704E256024E -> AMM router address in the provided chain",
    "factory_creation_code": "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f -> AMM factory creationCode hash in the provided chain through CREATE2.",
    "dummy (you can delete this line)": "the creation code can sometimes be obtained through a constant in the factory INIT_CODE_PAIR_HASH. If the AMM's factory has it, get it from there.",
    "dummy (you can delete this line)2": "if it doesn't you will have to look it up in their source code (usually found in the UniSwapV2Library/PancakeLibrary/etc when creating a pair) or in the worst case scenario, compile a contract that gets it using the build artifacts from the deployed factory contracts eg. type(TheAmmPairContract).creationCode"
  },
  "token": {
    "address": "address of the token to snipe. eg: 0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
    "pair_address": "address of the paired token in the LP. Probably WBNB (99%). eg: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    "wbnb": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c -> regardless of the name, in other chains this is the wrapped coin (weth/wmatic/wbnb/etc)",
    "busd": "0xe9e7cea3dedca5984780bafc599bd69add087d56 -> regardless of the name, in other chains this is an usd pegged token of your liking (usdt/busd/dai/etc)"
  },
  "accounts": {
    "admin": "admin is the administrator / deployer of the contracts. this pk gets the final sniped tokens, refunds and interacts with the trigger (supplying bnb / calling it / etc). eg: 1a3eb3fcacddad1...18baac8",
    "disperser": "disperser private key is the one that spreads bnb for gas to the swarm (for calling later the snipe). can be admin pk too."
  },
  "previewer": {
    "dummy (you can delete this line)": "stuff in here is used in the previewing of how the order will look like (through order-preview script)",
    "ext_order_size": 100,
    "liquidity_in_bnb": 300,
    "liquidity_in_token": 88888,
    "dummy (you can delete this line)2": "ext_order_size is the order of magnitude of what you assume others will be spending. liquidities are the ones added by the token owners to the LP. eg. ext_order_size=10 -> you assume either 10/20/30/40/... BNB will be spend alongside your snipe at liq. addition"
  },
  "swarm": {
    "dummy (you can delete this line)": "stuff in here is used when managing the swarm (creating one, refunding it back, parsing it for a snipe, etc)", 
    "rounds": 4,
    "spread_amount": 1.5,
    "path": "./config/bee_book.json",
    "dummy (you can delete this line)2": "rounds is the number of cycles in pow2 of swarming. eg. 4 rounds = 16 accounts (2**4).",
    "dummy (you can delete this line)3": "the more rounds, the more chances of frontrunning other bots you have, at the cost of more bnb spent in gas for txs",
    "dummy (you can delete this line)4": "spread_amount is the bnb you will spread to the swarm so they can call the trigger when liquidity is added. As long as you provide smth that can suffice all txs then OK. If you provide more it will stay there and can be reused for other snipes (or be refunded back)",
    "dummy (you can delete this line)5": "spread_amount can be floating point UP TO 3 DECIMAL PLACES. eg: 0.123 bnb OK / 0.1234 bnb ERROR."
  },
  "sniper": {
    "dummy (you can delete this line)": "stuff in here is used by the sniper when we are observing txs / about to snipe",
    "mode": "either 'pending_txs' or 'new_blocks'. By default is 'pending_txs'. Eg. new_blocks",
    "dummy (you can delete this line)2": "In pending_txs you will stream all pending txs as they arrive to the mempool. This is the ideal and best performant mode of sniping, but is way more resource intensive",
    "dummy (you can delete this line)3": "In new_blocks you will query blocks as they are added to the head of the blockchain. This is not as good as pending txs, but it's still far better than a manual snipe. It's not resource intensive.",
    "minimum_liquidity": 0.01,
    "dummy (you can delete this line)4": "minimum_liquidity is the minimum amount you expect as collateral (the paired asset, eg WBNB) to be added in the addLiquidity tx so we snipe. This is because sometimes devs or other people add liquidity on their own to trigger bots or scam (but add way less liq. than the expected). If the addLiquidity has less than the min provided here, we don't snipe",
    "monitors": {
      "address_list": {
        "enabled": false,
        "list": [
          {
            "name": "address_to_monitor_1",
            "addr": "0xBf66A7848f96a7dddeC6140d1CaA8eddFFE0DeaB -> you can monitor certain addresses to see what they do. Eg. team / contract owners / etc of the token to see if they are doing shady stuff"
          },
          {
            "name": "address_to_monitor_2",
            "addr": "0xcdb74F11592b66c2858f1d51ad7C87ba7b00fe897 -> or simply monitor an address because you want to see what it does.. ydy"
          },
          {
            "name": "wault",
            "addr": "0x9D620e8574D30c89Ee01EeFDA194d52ad9759aB5"
          }
        ]
      },
      "whale": {
        "enabled": false,
        "min": "50000000000000000000 -> number in string. if a tx sends more than this as its value (value: x in tx), then we capture it"
      }
    }
  }
}